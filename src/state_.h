#pragma once

#include <memory>
#include <string>

class State {
  private:
    
    /*      generateMoves
        &player -- player whose turn it is
        &opponent -- next player
        *moveCount -- the size of the move buffer (in moves) is stored here
        idx -- current position in the board string
        moveDepth -- how many moves were found in previous recursive steps

        returns int *, a new buffer containing moves for player. Each move is 2 ints, "from" and "to"

        i.e: 3 6 2 1 might be a buffer returned, then (3,6) is a move, and (2,1) is a move

    */
    int *generateMoves(const int &player, const int &opponent, size_t *moveCount, int idx = 0, int moveDepth = 0);
    State();

  public:
    char *board;
    int boardSize;
    //int player;

    State(std::string board, int player);
    ~State();
    
    //hash code for player on this board
    int code(int player);

    //bool operator==(const State &s);

    /*      play

        from -- piece to move
        to -- position to move piece to
        *undoBuffer -- pointer to some array that can hold an int and 2 chars

        Writes an int and 2 chars into the undo buffer.
        The int is the position where the undo should happen, the two chars are the two tiles for this position and the next one.
    */
    void play(int from, int to, char *undoBuffer);

    //Undo move from undo buffer generated by play()
    void undo(char *undoBuffer);

    //returns a move buffer by calling generateMoves
    int *getMoves(const int &player, const int &opponent, size_t *moveCount);
};

//ostream operator to print state
std::ostream &operator<<(std::ostream &os, const State &s);


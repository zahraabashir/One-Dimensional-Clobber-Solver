"""
00
01
10 *
11

4 -> 3 (1)

000
001
010
011
100 *
101 
110 *
111

8 -> 6 (2)

0000
0001
0010
0011
0100 *
0101
0110
0111
1000 *
1001
1010 *
1011
1100 *
1101 *
1110 *
1111

16 -> 10 (6)


00000
00001
00010
00011
00100
00101
00110
00111
01000 *
01001
01010
01011
01100 *
01101
01110
01111
10000 *
10001
10010 *
10011
10100 *
10101
10110 *
10111
11000 *
11001 *
11010 *
11011
11100 *
11101 *
11110 *
11111


32 -> 20 (12)

"""


maxSize = 16



found = set()
duplicates = set()
size = 6
for i in range(0, 2**size):
    val = bin(i).lstrip("0b").zfill(size)

    print(val, end="")
    if not val[::-1] in found:
        found.add(val)
        print("")
    else:
        duplicates.add(val)
        print(" *")
    

print(f"{2**size} -> {2**size - len(duplicates)} ({len(duplicates)})")


for i in range(0, 2**size):
    val = bin(i).lstrip("0b").zfill(size)
    print(1 if val in duplicates else 0, end = "")
print("")


"""
2: 1
3: 2 [*2]
4: 6 [*2 + 2]
5: 12 [*2]
6: 28 [*2 + 4]
7: 56 [*2]
8: 120 [*2 + 8]
9: 240 [*2]
10: 496 [*2 + 16]
11: 992 [*2]
12: 2016 [*2 + 32]
13: 4032 [*2]
14: 8128 [*2 + 64]
15: 16256 [*2]
16: 32640 [*2 + 128]
"""

"""
1,2,3,4,5,6

00
0010
00001010
0000100010101110
00000000100010001010101011101110
0000000010000000100010001010100010101010111010101110111011111110

--00
0010

----0010
00001010


--------00001010
0000100010101110


----------------0000100010101110
00000000100010001010101011101110

--------------------------------00000000100010001010101011101110
0000000010000000100010001010100010101010111010101110111011111110

"""
